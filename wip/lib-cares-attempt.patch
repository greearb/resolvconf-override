###  I realized I had no good idea how to do the ares_getaddrinfo work,
##  and furthermore, probably the original features will be enough for
##  my current needs, so just skipping attempt at libcares integration.
## --Ben

diff --git a/resolvconf-override.c b/resolvconf-override.c
index 3ce2647..ced8439 100644
--- a/resolvconf-override.c
+++ b/resolvconf-override.c
@@ -2,6 +2,7 @@
 
 /*
  * Copyright 2013, 2017 Bastien Nocera
+ * Copyright 2020 Ben Greear <greearb@candelatech.com>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public License as
@@ -46,6 +47,183 @@ print_ns (void)
 }
 #endif
 
+#ifdef HAVE_LIBCARES
+
+#include <ares.h>
+
+/* Options for using lib-cares */
+static int use_cares = 0;
+static int checked_cares_init = 0;
+static int cares_only4 = 0;
+static int cares_only6 = 0;
+ares_channel ares = NULL;
+
+/* Copied from wget project */
+static struct address_list *
+merge_address_lists (struct address_list *al1, struct address_list *al2) {
+   int count = al1->count + al2->count;
+
+   /* merge al2 into al1 */
+   al1->addresses = xrealloc (al1->addresses, sizeof(ip_address) * count);
+   memcpy (al1->addresses + al1->count, al2->addresses, sizeof(ip_address) * al2->count);
+   al1->count = count;
+
+   address_list_delete (al2);
+
+   return al1;
+}
+
+static struct address_list *
+address_list_from_hostent (struct hostent *host) {
+   int count, i;
+   struct address_list *al = xnew0 (struct address_list);
+
+   for (count = 0; host->h_addr_list[count]; count++)
+      ;
+
+   assert (count > 0);
+
+   al->addresses = xnew_array (ip_address, count);
+   al->count     = count;
+   al->refcount  = 1;
+
+   for (i = 0; i < count; i++) {
+      ip_address *ip = &al->addresses[i];
+      ip->family = host->h_addrtype;
+      memcpy (IP_INADDR_DATA (ip), host->h_addr_list[i], ip->family == AF_INET ? 4 : 16);
+   }
+
+   return al;
+}
+
+static void wait_ares(ares_channel channel) {
+
+   struct timeval started;
+   struct timeval now;
+   struct timeval end;
+
+   gettimeofday(&started, NULL);
+
+   end.tv_sec = started.tv_sec + 10; /* 10 sec timeout for now */
+   end.tv_usec = started.tv_usec;
+
+   for (;;) {
+      struct timeval *tvp, tv;
+      fd_set read_fds, write_fds;
+      int nfds, rc;
+
+      FD_ZERO (&read_fds);
+      FD_ZERO (&write_fds);
+      nfds = ares_fds (channel, &read_fds, &write_fds);
+      if (nfds == 0)
+	 break;
+
+      gettimeofday(&now, NULL);
+      if ((now.tv_sec > end.tv_sec) ||
+	  ((now.tv_sec == end.tv_sec) &&
+	   now.tv_usec >= end.tv_usec)) {
+	 tv.tv_sec = tv.tv_usec = 0;
+      }
+      else {
+	 /* Round-up fractional second waits for now */
+	 tv.tv_sec = (end.tv_sec - now.tv_sec) + 1;
+	 tv.tv_usec = 0;
+      }
+
+      tvp = ares_timeout (channel, &tv, &tv);
+
+      rc = select (nfds, &read_fds, &write_fds, NULL, tvp);
+      if (rc != 0)
+	 ares_process (channel, &read_fds, &write_fds);
+
+      /* Check to see if we have timed out? */
+      gettimeofday(&now, NULL);
+      if ((now.tv_sec > end.tv_sec) ||
+	  ((now.tv_sec == end.tv_sec) &&
+	   now.tv_usec >= end.tv_usec)) {
+	 ares_cancel(channel);
+      }
+   }
+}
+
+static void callback (void *arg, int status, int timeouts, struct hostent *host) {
+   struct address_list **al = (struct address_list **) arg;
+
+   if (!host || status != ARES_SUCCESS) {
+      *al = NULL;
+      return;
+   }
+
+   *al = address_list_from_hostent (host);
+}
+
+int _rc_init_cares() {
+   const char* srv = getenv("RESOLVECONF_CARES_SERVER");
+   const char* addr4 = getenv("RESOLVECONF_CARES_ADDR4");
+   const char* addr6 = getenv("RESOLVECONF_CARES_ADDR6");
+   const char* only4 = getenv("RESOLVECONF_CARES_ONLY4");
+   const char* only6 = getenv("RESOLVECONF_CARES_ONLY6");
+
+   return rc_init_cares(srv, addr4, addr6, only4, only6);
+}
+
+int resolveconf_init_cares(const char* srv, const char* addr4, const char* addr6) {
+   use_cares = 0; /* default to not use it */
+
+   if (addr4 || addr6 || srv) {
+      if (ares_library_init (ARES_LIB_INIT_ALL)) {
+	 fprintf (stderr, _("Failed to init libcares\n"));
+	 return -1;
+      }
+
+      if (ares_init (&ares) != ARES_SUCCESS) {
+	 fprintf (stderr, _("Failed to init ares channel\n"));
+	 return -1;
+      }
+
+      if (addr4) {
+	 struct in_addr a4;
+
+	 if (inet_pton (AF_INET, addr, &a4) == 1) {
+	    ares_set_local_ip4 (ares, ntohl(a4.s_addr));
+	 }
+	 else {
+	    fprintf (stderr, _("Failed to parse IP address '%s'\n"), addr4);
+	    return -1;
+	 }
+      }
+
+      if (addr6) {
+#ifdef ENABLE_IPV6
+	 struct in6_addr a6;
+
+	 if (inet_pton (AF_INET6, addr6, &a6) == 1) {
+	    ares_set_local_ip6 (ares, (unsigned char *) &a6);
+	 }
+	 else {
+	    fprintf (stderr, _("Failed to parse IPv6 address '%s'\n"), addr6);
+	    return -1;
+	 }
+#endif
+      }
+
+      if (srv) {
+	 int result;
+
+	 if ((result = ares_set_servers_csv (ares, srv)) != ARES_SUCCESS) {
+	    fprintf (stderr, _("Failed to set DNS server(s) '%s' (%d)\n"), srv, result);
+	    return -1;
+	 }
+      }
+
+      /* If here, we have successfully initialized c-ares */
+      use_cares = 1;
+   }
+
+   return 0;
+}
+#endif
+
 static void
 override_ns (void)
 {
@@ -85,6 +263,28 @@ override_options (void)
 
 struct hostent *gethostbyname(const char *name)
 {
+        check_cares_init();
+	if (use_cares) {
+
+	   struct address_list *al4;
+	   struct address_list *al6;
+
+	   if (opt.ipv4_only || !opt.ipv6_only)
+	      ares_gethostbyname (ares, host, AF_INET, callback, &al4);
+	   if (opt.ipv6_only || !opt.ipv4_only)
+	      ares_gethostbyname (ares, host, AF_INET6, callback, &al6);
+
+	   wait_ares (ares);
+
+	   if (al4 && al6)
+	      al = merge_address_lists (al4, al6);
+	   else if (al4)
+	      al = al4;
+	   else
+	      al = al6;
+	   return a1;
+	}
+
 	if (res_init () < 0)
 		return NULL;
 	struct hostent * (*f)() = dlsym (RTLD_NEXT, "gethostbyname");
@@ -97,6 +297,7 @@ int getaddrinfo(const char *node, const char *service,
 		const struct addrinfo *hints,
 		struct addrinfo **res)
 {
+        /* TODO:  Would need lib-cares integration */
 	if (res_init () < 0)
 		return EAI_SYSTEM;
 	int (*f)() = dlsym (RTLD_NEXT, "getaddrinfo");
